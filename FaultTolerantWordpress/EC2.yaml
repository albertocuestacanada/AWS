AWSTemplateFormatVersion: 2010-09-09
Outputs:

  WordpressServer:
    Description: A Wordpress Server for the Wordpress project.
    Value: !Ref WordpressServer
    Export:
      Name: WordpressServer

Parameters:
  KeyName:
    Description: EC2 Instance SSH Key
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: EC2 instance specs configuration
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium

Mappings:
  AMIs:
    eu-west-1:
      Name: ami-9cbe9be5

Resources:
  WordpressServer:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
    Type: "AWS::EC2::Instance"
    Metadata:
      Comment: Install a Wordpress Server
      AWS::CloudFormation::Init:
        config:
          sources:
            "/home/ec2-user/aws-cli": "https://github.com/aws/aws-cli/tarball/master"
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M    
    Properties: 
      # https://hackernoon.com/attach-an-iam-role-to-an-ec2-instance-with-cloudformation-33c517a8d4c3
      IamInstanceProfile: S3-Admin-Access # It might be a good idea to create this role also with CloudFormation
      ImageId: !FindInMap [ AMIs, !Ref 'AWS::Region', Name]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html
      SecurityGroupIds: 
        - !ImportValue WordpressWebSGGroupId
      SubnetId: !ImportValue WordpressSubnet1 # When an autoscaling group is created we will use more than one subnet
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            # Original UserData code, if httpd.conf and latest.tar.gz are modified to be used in the source section as is and thne stored in s3 then all commands except yum update could be moved to cfn-init            
            yum update -y
            yum install httpd php php-mysql stress -y
            cd /etc/httpd/conf
            cp httpd.conf httpdconfbackup.conf
            rm -rf httpd.conf
            wget https://s3-eu-west-1.amazonaws.com/acloudguru-wp/httpd.conf
            cd /var/www/html
            echo "healthy" > healthy.html
            wget https://wordpress.org/latest.tar.gz
            tar -xzf latest.tar.gz
            cp -r wordpress/* /var/www/html/
            rm -rf wordpress
            rm -rf latest.tar.gz
            chmod -R 755 wp-content
            chown -R apache:apache wp-content
            
            # cfn-init handling
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            echo "/opt/aws/bin/cfn-init -s ${AWS::StackId} -r WordpressServer --region=${AWS::Region} -v"
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r WordpressServer --region=${AWS::Region} -v
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            /opt/aws/bin/cfn-hup
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WordpressServer --region=${AWS::Region}
